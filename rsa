#!/usr/bin/python3

import sys
from typing import Tuple


def common_divisor(a: int, b: int) -> int:
    """Calculate the GCD two integers."""
    while b:
        a, b = b, a % b
    return a


def factorize_using_pollards_rho(n: int) -> Tuple[int, int]:
    """
    Apply Pollard's rho algorithm to factorize a given integer.

    Args:
        n (int): The integer to be factorized.

    Returns:
        Tuple[int, int]: A tuple containing two factors of the input integer.
    """
    if n % 2 == 0:
        return 2, n // 2

    x, y, d = 2, 2, 1
    f = lambda x: (x**2 + 1) % n

    while d == 1:
        x = f(x)
        y = f(f(y))
        d = common_divisor(abs(x - y), n)

    return d, n // d


def factorize(num: int) -> Tuple[int, int]:
    """
    Factorize a given integer into two smaller integers.

    Args:
        number (int): The integer to be factorized.

    Returns:
        Tuple[int, int]: A tuple containing two factors of the input integer.
    """
    if num <= 1:
        return num, 1
    else:
        return factorize_using_pollards_rho(num)


def main(filename: str) -> None:
    """
    Main function to read numbers from a file and print their factorizations.

    Parameters:
        filename (str): The name of the file containing natural
        numbers to factor.
    """
    try:
        with open(filename, "r") as file:
            for line in file:
                current_num = int(line.strip())
                factor1, factor2 = factorize(current_num)
                print(f"{current_num}={factor1}*{factor2}")
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
    except ValueError as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: factors file")
        sys.exit(1)

    input_filename = sys.argv[1]
    main(input_filename)
